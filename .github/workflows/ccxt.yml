name: Actualizar Bitcoin Data

on:
  schedule:
       - cron: '0 0 * * *' # Ejecuta la acción diariamente a medianoche UTC
  workflow_dispatch: # Permite ejecutar la acción manualmente desde GitHub

jobs:
  update-data:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Cambia a la versión de Python que necesites

      - name: Instalar dependencias
        run: pip install ccxt pandas

      - name: Ejecutar script de actualización
        run: |
          python -c "
          import ccxt
          import pandas as pd
          from datetime import datetime, timedelta
          exchange = ccxt.kraken()
          def fetch_bitcoin_data(symbol='BTC/USD', since=None):
              ohlcv = exchange.fetch_ohlcv(symbol, timeframe='1d', since=since)
              df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
              df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
              return df
          def update_output_csv(file_path='Output.csv'):
              try:
                  df_existing = pd.read_csv(file_path)
                  df_existing['timestamp'] = pd.to_datetime(df_existing['timestamp'])
              except FileNotFoundError:
                  df_existing = pd.DataFrame()
              
              # Establece la fecha desde la cual obtener datos
              last_date = df_existing['timestamp'].max() if not df_existing.empty else datetime.utcnow() - timedelta(days=365)
              since = int((last_date + timedelta(days=1)).timestamp() * 1000)
      
              # Obtiene los datos nuevos desde la API
              df_new = fetch_bitcoin_data(since=since)
      
              # Elimina los datos del día actual si ya existen en el archivo
              df_existing = df_existing[df_existing['timestamp'].dt.date != datetime.utcnow().date()]
      
              # Combina los datos existentes con los nuevos y elimina duplicados por fecha
              df_combined = pd.concat([df_existing, df_new]).drop_duplicates(subset='timestamp', keep='last')
              df_combined = df_combined.sort_values(by='timestamp')
      
              # Guarda el archivo actualizado
              df_combined.to_csv(file_path, index=False)
              print(f'Archivo {file_path} actualizado con los datos más recientes.')
          
          update_output_csv('Output.csv')
          "


      - name: Commit and push changes
        run: |
          git config --global user.email "carterasdebolsa@gmail.com"
          git config --global user.name "Carterasdebolsa"
          git add Output.csv
          git commit -m "Update Output.csv on $(date)"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          
